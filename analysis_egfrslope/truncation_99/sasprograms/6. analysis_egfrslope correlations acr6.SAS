%let t=truncation_99;
%let path1=d:\userdata\Shared\CKD_Endpts\FDA Conference 2\Data\Cleaned Data\FIDELIO-DKD;

libname Master "&path1";
libname SASdata  "&path1\analysis_egfrslope\&t.\datasets";
libname results "&path1\analysis_egfrslope\&t.\correlations6\results";
libname temp "&path1\analysis_egfrslope\&t.\correlations6\temp";
libname temp2 "&path1\analysis_egfrslope\&t.\correlations6\temp2";
libname ACR "&path1\analysis_acr\datasets";

 
options validvarname=v7 nodate center nonumber replace xsync noxwait nofmterr ls=96 mautosource 
sasautos=("&path1\macros");

%include "&path1\macros\Updated Joint_Model_POM_YN_SP_YN_Kappa_YN_PE.sas";

%let N_trt=2;
%let N_Trt_1=1;

%let N_event=10;*!!!!!!!___modify the count of endpoints____!!!!!!!!;
%macro declearNIntervals;
%do ki = 1 %to &N_event; %global NIntervals&ki include&ki;  %end;
%mend;
%declearNIntervals;
%global  b_CKDegfr_Mean;
%global  ACR;          *!!!!!!___New macro variable option to include or exclude ACR modeling;     
%global  CE;           *!!!!!!___New macro variable option to include or exclude clinical event (CE) modeling;       
%global  Proportional;
%global  POM;
%global  SP_threshold; *!!!!!!___EFV: This may be necessary to allow us to change this within macro Run_Model;  
%global  SP;
%global  HESS;   
%global  PSI21;        *!!!!!!___EFV: This global macro variable is only defined in DOALL as a last resort eGFR model 
                                 in combination with the macro variable HESS. The default is PSI21=YES so that the
                                 the parameter psi21 is included in the random effects covariance structure. However,
                                 one can set PSI21=NO which will force PSI21=0 for any given model one wishes to run;
%let ACR=YES;          *!!!!!!___set YES/NO to include (YES) or exclude (NO) ACR in the joint model;
%let CE=YES;           *!!!!!!___set YES/NO to include (YES) or exclude (NO) clinical events (CE) in the joint model;
%let Proportional=YES; *!!!!!!___set YES/NO to allow or not allow different random slope variance for different treatments_____!!!!!!!!!!!!!!;
%let POM=SS;           *!!!!!!___set SS/PA/NO to allow or not allow power of mean (POM) residual variance!!!!!!!!!!!!!!;
%let SP_threshold=15;  *!!!!!!___set threshold for SP model, if the total count of ev_dx event is less than this threshold, POM model will be run, otherwise SP model will be run!!!!!!!!!!!!!!;
%let HESS=YES;         *!!!!!!___set HESS=YES if you want to allow automatic switch from SS-POM to PA-POM when Hessian is a problem under SS-POM
                                 or if you want to further allow automatic switch from PA-POM to NO-POM when Hessian is a problem under PA-POM, 
                                 set HESS=NO if you want to run all three POM options and compare results using macros Compare_POM and Summary - see end of program for example !!!!!!!!!!!!!!;
%let PSI21=YES;        *!!!!!!___set YES/NO to include (YES) or exclude the parameter psi21 from the random effects del;   
data acr;
 set ACR.fda2_allrx;
 if datagrp2=1;
 if zupro>0 then lg_b_ACR=log(zupro);else if zupro=0 then lg_b_ACR=log(0.01);
 delta_lg_ACR=logdelupro6;
 if logdelupro6=. then delete;
 keep allrx new_id lg_b_ACR delta_lg_ACR include_acr;
run;
proc sort data=acr;
 by allrx new_id;
run;
proc sort data=ACR.fda2_allrx out=include_acr(keep=allrx) nodupkey;
 by allrx;
run;
data include_acr;
 set include_acr;
 rename allrx=study_num;
run;
data allrxdata;
 set SASdata.allrxdata;
 study_num=allrx;
run;
data studydescrip;
 set SASdata.studydescrip;
 npatients=patients;
 nevents=n1;
 keep study_num study npatients nevents knot v4time1s pv4time1 v4time2s pv4time2 v4time3s pv4time3 mean_n_egfr 
      mean_max_visit_time mean_b_CKDegfr min_b_CKDegfr max_b_CKDegfr sum_ev_dx sum_ev_d sum_ev_x sum_ev_d2y pct_ev_dx 
      pct_ev_x pct_ev_d2y;
run;
/** Get baseline UP **/
data ddshort;
 set Master.fdac2_tx_allendpts;
 if b_ckdegfr=. then delete;
run;
data ddlong;
 set Master.fdac2_visits;
 if visit_time=. or visit_time <= 0 or fu_ckdegfr=. then delete;
run;
proc sort data=ddshort out=ddshort_unique(keep=new_id study_num) nodupkey;
 by new_id study_num;
run;
proc sort data=ddshort out=fu_dx(keep=new_id study_num fu_dx) nodupkey;
 by new_id study_num;
run;
proc sort data=ddlong out=ddlong_unique(keep=new_id study_num) nodupkey;
 by new_id study_num;
run;
data unique_ids;
 merge ddshort_unique(in=in1) ddlong_unique(in=in2);
 by new_id study_num;
run;
proc sort data=ddshort;
 by new_id study_num;
run;
proc sort data=unique_ids;
 by new_id study_num;
run;
data dshort;
 merge ddshort(in=in1) unique_ids(in=in2);
 by new_id study_num;
 if in1 and in2;
run;
data base;
 set dshort;
 %include "&path1\macros\zupro.sas";
 zzupro=zupro/1000;
 keep allrx zzupro;
run;
data base1;
 set base;
 rename allrx=study_num;
run;
proc means data=base1 median;
 var zzupro;
 class study_num;
 ods output summary=base_up(drop=nobs);
run;
proc sort data=allrxdata;
 by study_num;
run;
proc sort data=base_up;
 by study_num;
run;
proc sort data=studydescrip;
 by study_num;
run;
proc sort data=include_acr;
 by study_num;
run;
data allrxleveldata;
 merge studydescrip allrxdata base_up include_acr(in=in1);
 by study_num;
 if in1;
run;
*_____________________data management starts_________________________________________;
data events0;
 set Master.fdac2_tx_allendpts;
 if b_ckdegfr=. then delete;
run;
*!!!!!!!!____rename composite events, please refer back to here for the mean of those events_____!!!!!!!!!!!;
data events;
set events0;
ev1=ev_dg_40_p_con;
fu1=fu_dg_40_p_con;
ev2=ev_dg_30_p_con;
fu2=fu_dg_30_p_con;
ev3=ev_dgs_con;
fu3=fu_dgs_con;
ev4=ev_dg_con;
fu4=fu_dg_con;
ev5=ev_dgsx_con;
fu5=fu_dgsx_con;
ev6=ev_d;
fu6=fu_d;
ev7=ev_dx;
fu7=fu_dx;
ev8=ev_40_p_con;
fu8=mos_40_p_con;
ev9=ev_30_p_con;
fu9=mos_30_p_con;
ev10=ev_dg_57_p_con;
fu10=fu_dg_57_p_con;
keep allrx new_id--studyname1 b_CKDegfr T_assign fu1 fu2 fu3 fu4 fu5 fu6 fu7 fu8 fu9 fu10 ev1 ev2 ev3 ev4 ev5 ev6 ev7 ev8 ev9 ev10;
run;
data GFR;
 set SASdata.studies;
 keep allrx new_id--visit_time b_CKDegfr fu_CKDegfr subject study;
run;
proc sort data=GFR; 
 by allrx new_id;
run;
proc sort data=events; 
 by allrx new_id;
run;
proc sort data=acr; 
 by allrx new_id;
run;
data studies1;
 merge GFR(in=a) events(in=b) acr(in=c);
 by allrx new_id;
run;
data studies1;
 set studies1;
 if study=. then delete;
run;
proc sort data=gfr; 
 by allrx new_id visit_time;
run;
data baseline;
 set GFR;
 by allrx new_id visit_time;
 if first.new_id;
run;
proc tabulate data=baseline out=mean_bsl;
 class allrx;
 var b_CKDegfr;
 table b_CKDegfr*mean, allrx;
run;
data mean_bsl;
set mean_bsl;
drop _TYPE_--_TABLE_;
run;
proc sort data=studies1; 
 by allrx;
run;
proc sort data=mean_bsl; 
 by allrx;
run;
data studies2;
 merge studies1(in=in1) mean_bsl;
 by allrx;
 if in1;
run;
data studies3;
 set studies2;
 Month=visit_time;
 lg_b_CKDegfr=log(b_CKDegfr); *lg_b_CKDegfr is calculated before b_CKDegfr is centralized;
*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*;
***!!!!!!!centralize baseline eGFR, but follow-up eGFR is not centralized;
 b_CKDegfr=b_CKDegfr-b_CKDegfr_Mean;
 TrtID=T_assign+1;
run;
proc sort data=studies3; 
 by study subject Month; 
run;
%macro large(data,n1,n2,out);
proc datasets nolist;
delete temp temp1 sizeofstudies sizeofstudies1 large large1 large2;
run;
quit;
data temp;
set &data;
run;
proc sort data=temp out=sizeofstudies nodupkey;
by study new_id;
run;
proc sql noprint;
create table sizeofstudies1 as
select study, count(*) as count
from sizeofstudies
group by study;
quit;
data sizeofstudies2;
set sizeofstudies1;
if count > &n1;
run;
%if %obsnumber(sizeofstudies2)>0 %then %do;
proc sql noprint;
select study into :studiesid separated by ' ' from sizeofstudies2;
quit;
data large;
set temp;
if study in (&studiesid);
keep study subject t_assign new_id;
run;
proc sort data=large out=large1 nodupkey;
by study subject;
run;
proc sort data=large1;
by study t_assign;
run;
proc surveyselect data=large1 method=srs n=&n2 out=large2 seed=1234;
strata study t_assign;
run;
data large2;
set large2;
sampled=1;
keep study new_id sampled;
run;
proc sort data=large2;
by study new_id;
run;
proc sort data=temp;
by study new_id;
run;
data temp1;
merge temp(in=in1) large2(in=in2);
by study new_id;
if in1;
run;
data &out;
set temp1;
if study in (&studiesid) and sampled=. then delete;
run;
proc sort data=&out; 
 by study subject Month; 
run;
proc sort data=&out out=u1 nodupkey;
by study new_id;
run;
%end;
%else %do;
data &out;
set temp;
run;
proc sort data=&out; 
 by study subject Month; 
run;
proc sort data=&out out=u1 nodupkey;
by study new_id;
run;
%end;
proc datasets nolist;
delete temp temp1 sizeofstudies sizeofstudies1 large large1 large2;
run;
quit;
%mend;

/** For larger studies N>1600, use a subset for correlations: execution time is large the default is to use 800 per arm max **/
%large(studies3,1600,800,studies);

%zinitialize_studies(1);

ods listing close;
options nonotes nomprint nosymbolgen nomlogic;
*options notes mprint symbolgen mlogic;
*ods listing;
%InitialModelOptions(_POM_=SS,_ACR_=YES,_CE_=YES,_Prop_=YES,_SP_threshold=15,_HESS_=YES);
%doall(1);


